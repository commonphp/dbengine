<?php

/**
 * Specifies the essential functionalities that any database connector within the CommonPHP Database Engine must provide.
 * This includes capabilities for executing queries against a database and retrieving the last insert ID after an insert operation.
 * The interface ensures a consistent approach to database interactions, allowing for flexible integration of various database engines.
 *
 * @package CommonPHP
 * @subpackage DatabaseEngine
 * @author Timothy McClatchey <timothy@commonphp.org>
 * @copyright 2024 CommonPHP.org
 * @license http://opensource.org/licenses/MIT MIT License
 * @noinspection PhpUnused
 */

namespace CommonPHP\DatabaseEngine\Contracts;

use CommonPHP\DatabaseEngine\Query;
use CommonPHP\DatabaseEngine\Result;
use CommonPHP\DatabaseEngine\Support\TypeConversionProvider;

interface ConnectorContract
{
    /**
     * Retrieves the last insert ID generated by the last INSERT operation.
     * This method is essential for obtaining auto-generated keys after data insertion, providing a way to reference newly created entities.
     *
     * @return string|int The last insert ID as a string or integer, depending on the database's handling of such IDs.
     */
    function getLastInsertId(): string|int;

    /**
     * Executes a given query using this connector, utilizing the provided TypeConversionProvider for any necessary type conversions.
     * This method serves as a bridge between the application's logic and the underlying database engine, facilitating the execution of both simple
     * and complex queries while ensuring type safety and conversion consistency.
     *
     * @param TypeConversionProvider $typeConversionProvider The provider to use for type conversion during query execution.
     * @param Query|BuildableQueryContract $query The query to execute, which can be a raw Query object or an object that builds to a Query.
     * @return Result The result of the query execution, encapsulated within a Result object.
     */
    function execute(TypeConversionProvider $typeConversionProvider, Query|BuildableQueryContract $query): Result;
}